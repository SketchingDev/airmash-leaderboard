service:
  name: stats-leaderboard

plugins:
  - serverless-plugin-monorepo
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  stackTags:
    PROJECT: "airmash-leaderboard"
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

custom:
  stages:
    - dev
    - prod
    - ci
  playerSnapshotsTableName: airmash-leaderboard-${self:provider.stage}-player-snapshots
  corsOrigin:
    dev: "*"
    ci: "*"
    prod: "https://airmash-leaderboard.sketchingdev.co.uk"

functions:
  eventsConsumer:
    handler: dist/handlers/consumer/handler.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: { Fn::GetAtt: [ LeaderboardTable, Arn ] }
    timeout: 40
    environment:
      GAME_TABLE_NAME: ${self:custom.playerSnapshotsTableName}
    events:
      - eventBridge:
          pattern:
            source:
              - game-bot
            detail-type:
              - login

  leaderboardEndpoint:
    handler: dist/handlers/api/leaderboard/handler.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - { "Fn::GetAtt": [LeaderboardTable, "Arn" ] }
          - { "Fn::Join": ['/', [Fn::GetAtt: [ LeaderboardTable, Arn ], "index/*"]] }
    environment:
      GAME_TABLE_NAME: ${self:custom.playerSnapshotsTableName}
      MIN_ACCOUNT_LEVEL: 3
      LEADERBOARD_SIZE: 50
      CORS_ORIGIN: ${self:custom.corsOrigin.${self:provider.stage}}
    events:
      # TODO Enable caching https://www.serverless.com/plugins/serverless-api-gateway-caching
      - http:
          method: GET
          path: leaderboard
          request:
            parameters:
              paths:
                url: true

  playerEndpoint:
    handler: dist/handlers/api/player/handler.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - { "Fn::GetAtt": [LeaderboardTable, "Arn" ] }
          - { "Fn::Join": ['/', [Fn::GetAtt: [ LeaderboardTable, Arn ], "index/*"]] }
    environment:
      GAME_TABLE_NAME: ${self:custom.playerSnapshotsTableName}
      CORS_ORIGIN: ${self:custom.corsOrigin.${self:provider.stage}}
    events:
      # TODO Enable caching https://www.serverless.com/plugins/serverless-api-gateway-caching
      - http:
          method: GET
          path: player/{playerName}
          request:
            parameters:
              paths:
                playerName: true

resources:
  Resources:
    LeaderboardTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: playerName
            KeyType: HASH
          - AttributeName: snapshotTimestamp
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: playerName
            AttributeType: S
          - AttributeName: snapshotTimestamp
            AttributeType: S
          - AttributeName: week
            AttributeType: S
          - AttributeName: level
            AttributeType: N
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: leaderboardGSI
            KeySchema:
              - AttributeName: week
                KeyType: HASH
              - AttributeName: level
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - playerName
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:custom.playerSnapshotsTableName}
